package IPclLicenseServiceContract;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 8/29/2017 12:54:15 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import IPclLicenseServiceContract.WS_Enums.*;

import java.util.List;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.HeaderProperty;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import android.os.AsyncTask;
import org.ksoap2.serialization.MarshalFloat;

import IPclLicenseServiceContract.IWsdl2CodeEvents;

public class PclLicenseServiceContractClient {
    
    public String NAMESPACE ="";
    public String url="";
    public int timeOut = 180;
    public IPclLicenseServiceContract.IWsdl2CodeEvents eventHandler;
    public CommunicationState state;

    public PclLicenseServiceContractClient(){}
    
    public PclLicenseServiceContractClient(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public PclLicenseServiceContractClient(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public PclLicenseServiceContractClient(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void PurchaseLicenseAsync(PurchaseLicenseModel purchaseLicense1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PurchaseLicenseAsync(purchaseLicense1, null);
    }
    
    public void PurchaseLicenseAsync(final PurchaseLicenseModel purchaseLicense1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PurchaseLicenseResponseModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PurchaseLicenseResponseModel doInBackground(Void... params) {
                return PurchaseLicense(purchaseLicense1, headers);
            }
            @Override
            protected void onPostExecute(PurchaseLicenseResponseModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PurchaseLicense", result);
                }
            }
        }.execute();
    }
    
    public PurchaseLicenseResponseModel PurchaseLicense(PurchaseLicenseModel purchaseLicense1){
        return PurchaseLicense(purchaseLicense1, null);
    }
    
    public PurchaseLicenseResponseModel PurchaseLicense(PurchaseLicenseModel purchaseLicense1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","PurchaseLicense");
        soapEnvelope.addMapping("","purchaseLicense1",new PurchaseLicenseModel().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("purchaseLicense1",purchaseLicense1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseLicense", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseLicense", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PurchaseLicenseResponseModel resultVariable =  new PurchaseLicenseResponseModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PurchaseLicenseRenewalAsync(PurchaseLicenseRenewalModel purchaseLicenseRenewal1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PurchaseLicenseRenewalAsync(purchaseLicenseRenewal1, null);
    }
    
    public void PurchaseLicenseRenewalAsync(final PurchaseLicenseRenewalModel purchaseLicenseRenewal1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PurchaseLicenseResponseModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PurchaseLicenseResponseModel doInBackground(Void... params) {
                return PurchaseLicenseRenewal(purchaseLicenseRenewal1, headers);
            }
            @Override
            protected void onPostExecute(PurchaseLicenseResponseModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PurchaseLicenseRenewal", result);
                }
            }
        }.execute();
    }
    
    public PurchaseLicenseResponseModel PurchaseLicenseRenewal(PurchaseLicenseRenewalModel purchaseLicenseRenewal1){
        return PurchaseLicenseRenewal(purchaseLicenseRenewal1, null);
    }
    
    public PurchaseLicenseResponseModel PurchaseLicenseRenewal(PurchaseLicenseRenewalModel purchaseLicenseRenewal1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","PurchaseLicenseRenewal");
        soapEnvelope.addMapping("","purchaseLicenseRenewal1",new PurchaseLicenseRenewalModel().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("purchaseLicenseRenewal1",purchaseLicenseRenewal1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseLicenseRenewal", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseLicenseRenewal", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PurchaseLicenseResponseModel resultVariable =  new PurchaseLicenseResponseModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PurchaseAdditionalDevicesAsync(PurchaseAdditionalDevicesModel purchaseAdditionalDevices1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PurchaseAdditionalDevicesAsync(purchaseAdditionalDevices1, null);
    }
    
    public void PurchaseAdditionalDevicesAsync(final PurchaseAdditionalDevicesModel purchaseAdditionalDevices1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PurchaseLicenseResponseModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PurchaseLicenseResponseModel doInBackground(Void... params) {
                return PurchaseAdditionalDevices(purchaseAdditionalDevices1, headers);
            }
            @Override
            protected void onPostExecute(PurchaseLicenseResponseModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PurchaseAdditionalDevices", result);
                }
            }
        }.execute();
    }
    
    public PurchaseLicenseResponseModel PurchaseAdditionalDevices(PurchaseAdditionalDevicesModel purchaseAdditionalDevices1){
        return PurchaseAdditionalDevices(purchaseAdditionalDevices1, null);
    }
    
    public PurchaseLicenseResponseModel PurchaseAdditionalDevices(PurchaseAdditionalDevicesModel purchaseAdditionalDevices1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","PurchaseAdditionalDevices");
        soapEnvelope.addMapping("","purchaseAdditionalDevices1",new PurchaseAdditionalDevicesModel().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("purchaseAdditionalDevices1",purchaseAdditionalDevices1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseAdditionalDevices", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseAdditionalDevices", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PurchaseLicenseResponseModel resultVariable =  new PurchaseLicenseResponseModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void PurchaseUpgradeLicenseAsync(PurchaseUpgradeLicenseModel purchaseUpgradeLicense1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PurchaseUpgradeLicenseAsync(purchaseUpgradeLicense1, null);
    }
    
    public void PurchaseUpgradeLicenseAsync(final PurchaseUpgradeLicenseModel purchaseUpgradeLicense1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, PurchaseLicenseResponseModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected PurchaseLicenseResponseModel doInBackground(Void... params) {
                return PurchaseUpgradeLicense(purchaseUpgradeLicense1, headers);
            }
            @Override
            protected void onPostExecute(PurchaseLicenseResponseModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("PurchaseUpgradeLicense", result);
                }
            }
        }.execute();
    }
    
    public PurchaseLicenseResponseModel PurchaseUpgradeLicense(PurchaseUpgradeLicenseModel purchaseUpgradeLicense1){
        return PurchaseUpgradeLicense(purchaseUpgradeLicense1, null);
    }
    
    public PurchaseLicenseResponseModel PurchaseUpgradeLicense(PurchaseUpgradeLicenseModel purchaseUpgradeLicense1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","PurchaseUpgradeLicense");
        soapEnvelope.addMapping("","purchaseUpgradeLicense1",new PurchaseUpgradeLicenseModel().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("purchaseUpgradeLicense1",purchaseUpgradeLicense1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseUpgradeLicense", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/PurchaseUpgradeLicense", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    PurchaseLicenseResponseModel resultVariable =  new PurchaseLicenseResponseModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void VerifyDiscountCodeAsync(DiscountCodeModel discountCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        VerifyDiscountCodeAsync(discountCode, null);
    }
    
    public void VerifyDiscountCodeAsync(final DiscountCodeModel discountCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, DiscountCodeVerificationModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected DiscountCodeVerificationModel doInBackground(Void... params) {
                return VerifyDiscountCode(discountCode, headers);
            }
            @Override
            protected void onPostExecute(DiscountCodeVerificationModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("VerifyDiscountCode", result);
                }
            }
        }.execute();
    }
    
    public DiscountCodeVerificationModel VerifyDiscountCode(DiscountCodeModel discountCode){
        return VerifyDiscountCode(discountCode, null);
    }
    
    public DiscountCodeVerificationModel VerifyDiscountCode(DiscountCodeModel discountCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","VerifyDiscountCode");
        soapEnvelope.addMapping("","discountCode",new DiscountCodeModel().getClass());
        soapReq.addProperty("discountCode",discountCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/VerifyDiscountCode", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/VerifyDiscountCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    DiscountCodeVerificationModel resultVariable =  new DiscountCodeVerificationModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetInvoiceForPaymentAsync(String invoiceGuid,String userGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetInvoiceForPaymentAsync(invoiceGuid, userGuid, null);
    }
    
    public void GetInvoiceForPaymentAsync(final String invoiceGuid,final String userGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, InvoiceModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected InvoiceModel doInBackground(Void... params) {
                return GetInvoiceForPayment(invoiceGuid, userGuid, headers);
            }
            @Override
            protected void onPostExecute(InvoiceModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetInvoiceForPayment", result);
                }
            }
        }.execute();
    }
    
    public InvoiceModel GetInvoiceForPayment(String invoiceGuid,String userGuid){
        return GetInvoiceForPayment(invoiceGuid, userGuid, null);
    }
    
    public InvoiceModel GetInvoiceForPayment(String invoiceGuid,String userGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetInvoiceForPayment");
        soapReq.addProperty("invoiceGuid",invoiceGuid);
        soapReq.addProperty("userGuid",userGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetInvoiceForPayment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetInvoiceForPayment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    InvoiceModel resultVariable =  new InvoiceModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetDefaultInvoiceInfoAsync(String userGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDefaultInvoiceInfoAsync(userGuid, null);
    }
    
    public void GetDefaultInvoiceInfoAsync(final String userGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, InvoiceInfoModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected InvoiceInfoModel doInBackground(Void... params) {
                return GetDefaultInvoiceInfo(userGuid, headers);
            }
            @Override
            protected void onPostExecute(InvoiceInfoModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetDefaultInvoiceInfo", result);
                }
            }
        }.execute();
    }
    
    public InvoiceInfoModel GetDefaultInvoiceInfo(String userGuid){
        return GetDefaultInvoiceInfo(userGuid, null);
    }
    
    public InvoiceInfoModel GetDefaultInvoiceInfo(String userGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetDefaultInvoiceInfo");
        soapReq.addProperty("userGuid",userGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetDefaultInvoiceInfo", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetDefaultInvoiceInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    InvoiceInfoModel resultVariable =  new InvoiceInfoModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLicensePlansAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLicensePlansAsync(null);
    }
    
    public void GetLicensePlansAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, LicensePlansOfferModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected LicensePlansOfferModel doInBackground(Void... params) {
                return GetLicensePlans(headers);
            }
            @Override
            protected void onPostExecute(LicensePlansOfferModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLicensePlans", result);
                }
            }
        }.execute();
    }
    
    public LicensePlansOfferModel GetLicensePlans(){
        return GetLicensePlans(null);
    }
    
    public LicensePlansOfferModel GetLicensePlans(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetLicensePlans");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetLicensePlans", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetLicensePlans", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    LicensePlansOfferModel resultVariable =  new LicensePlansOfferModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLicenseOrderHistoryAsync(String userAccountGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLicenseOrderHistoryAsync(userAccountGuid, null);
    }
    
    public void GetLicenseOrderHistoryAsync(final String userAccountGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, LicenseOrderHistory>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected LicenseOrderHistory doInBackground(Void... params) {
                return GetLicenseOrderHistory(userAccountGuid, headers);
            }
            @Override
            protected void onPostExecute(LicenseOrderHistory result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLicenseOrderHistory", result);
                }
            }
        }.execute();
    }
    
    public LicenseOrderHistory GetLicenseOrderHistory(String userAccountGuid){
        return GetLicenseOrderHistory(userAccountGuid, null);
    }
    
    public LicenseOrderHistory GetLicenseOrderHistory(String userAccountGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetLicenseOrderHistory");
        soapReq.addProperty("userAccountGuid",userAccountGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetLicenseOrderHistory", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetLicenseOrderHistory", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    LicenseOrderHistory resultVariable =  new LicenseOrderHistory (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CheckLicenseAsync(String userGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckLicenseAsync(userGuid, null);
    }
    
    public void CheckLicenseAsync(final String userGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, LicenseStatus>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected LicenseStatus doInBackground(Void... params) {
                return CheckLicense(userGuid, headers);
            }
            @Override
            protected void onPostExecute(LicenseStatus result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckLicense", result);
                }
            }
        }.execute();
    }
    
    public LicenseStatus CheckLicense(String userGuid){
        return CheckLicense(userGuid, null);
    }
    
    public LicenseStatus CheckLicense(String userGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","CheckLicense");
        soapReq.addProperty("userGuid",userGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CheckLicense", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CheckLicense", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    LicenseStatus resultVariable =  new LicenseStatus (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetLastActiveLicenseAsync(String userGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetLastActiveLicenseAsync(userGuid, null);
    }
    
    public void GetLastActiveLicenseAsync(final String userGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ActiveLicenseModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ActiveLicenseModel doInBackground(Void... params) {
                return GetLastActiveLicense(userGuid, headers);
            }
            @Override
            protected void onPostExecute(ActiveLicenseModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetLastActiveLicense", result);
                }
            }
        }.execute();
    }
    
    public ActiveLicenseModel GetLastActiveLicense(String userGuid){
        return GetLastActiveLicense(userGuid, null);
    }
    
    public ActiveLicenseModel GetLastActiveLicense(String userGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetLastActiveLicense");
        soapReq.addProperty("userGuid",userGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetLastActiveLicense", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetLastActiveLicense", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ActiveLicenseModel resultVariable =  new ActiveLicenseModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CanAttachDeviceAsync(String adminEmail,String pin) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CanAttachDeviceAsync(adminEmail, pin, null);
    }
    
    public void CanAttachDeviceAsync(final String adminEmail,final String pin,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, NewDeviceLicenseResponse>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected NewDeviceLicenseResponse doInBackground(Void... params) {
                return CanAttachDevice(adminEmail, pin, headers);
            }
            @Override
            protected void onPostExecute(NewDeviceLicenseResponse result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CanAttachDevice", result);
                }
            }
        }.execute();
    }
    
    public NewDeviceLicenseResponse CanAttachDevice(String adminEmail,String pin){
        return CanAttachDevice(adminEmail, pin, null);
    }
    
    public NewDeviceLicenseResponse CanAttachDevice(String adminEmail,String pin,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","CanAttachDevice");
        soapReq.addProperty("adminEmail",adminEmail);
        soapReq.addProperty("pin",pin);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CanAttachDevice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CanAttachDevice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    NewDeviceLicenseResponse resultVariable =  new NewDeviceLicenseResponse (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CheckAdminPinAsync(String adminEmail,String pin) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckAdminPinAsync(adminEmail, pin, null);
    }
    
    public void CheckAdminPinAsync(final String adminEmail,final String pin,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return CheckAdminPin(adminEmail, pin, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CheckAdminPin", result);
                }
            }
        }.execute();
    }
    
    public boolean CheckAdminPin(String adminEmail,String pin){
        return CheckAdminPin(adminEmail, pin, null);
    }
    
    public boolean CheckAdminPin(String adminEmail,String pin,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","CheckAdminPin");
        soapReq.addProperty("adminEmail",adminEmail);
        soapReq.addProperty("pin",pin);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CheckAdminPin", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CheckAdminPin", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void GetRolesForUserAsync(String email) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRolesForUserAsync(email, null);
    }
    
    public void GetRolesForUserAsync(final String email,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorString>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorString doInBackground(Void... params) {
                return GetRolesForUser(email, headers);
            }
            @Override
            protected void onPostExecute(VectorString result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetRolesForUser", result);
                }
            }
        }.execute();
    }
    
    public VectorString GetRolesForUser(String email){
        return GetRolesForUser(email, null);
    }
    
    public VectorString GetRolesForUser(String email,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetRolesForUser");
        soapReq.addProperty("email",email);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetRolesForUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetRolesForUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorString resultVariable = new VectorString(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void FindDemoUserAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        FindDemoUserAsync(null);
    }
    
    public void FindDemoUserAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, UserAccountModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected UserAccountModel doInBackground(Void... params) {
                return FindDemoUser(headers);
            }
            @Override
            protected void onPostExecute(UserAccountModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("FindDemoUser", result);
                }
            }
        }.execute();
    }
    
    public UserAccountModel FindDemoUser(){
        return FindDemoUser(null);
    }
    
    public UserAccountModel FindDemoUser(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","FindDemoUser");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/FindDemoUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/FindDemoUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    UserAccountModel resultVariable =  new UserAccountModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void FindAsync(String email,String password,String ip) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        FindAsync(email, password, ip, null);
    }
    
    public void FindAsync(final String email,final String password,final String ip,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, UserAccountModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected UserAccountModel doInBackground(Void... params) {
                return Find(email, password, ip, headers);
            }
            @Override
            protected void onPostExecute(UserAccountModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Find", result);
                }
            }
        }.execute();
    }
    
    public UserAccountModel Find(String email,String password,String ip){
        return Find(email, password, ip, null);
    }
    
    public UserAccountModel Find(String email,String password,String ip,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","Find");
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapReq.addProperty("ip",ip);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/Find", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/Find", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    UserAccountModel resultVariable =  new UserAccountModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CreateAdditionalUserAsync(CreateAdditionalUserModel userModel) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CreateAdditionalUserAsync(userModel, null);
    }
    
    public void CreateAdditionalUserAsync(final CreateAdditionalUserModel userModel,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, CreateUserResultModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected CreateUserResultModel doInBackground(Void... params) {
                return CreateAdditionalUser(userModel, headers);
            }
            @Override
            protected void onPostExecute(CreateUserResultModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CreateAdditionalUser", result);
                }
            }
        }.execute();
    }
    
    public CreateUserResultModel CreateAdditionalUser(CreateAdditionalUserModel userModel){
        return CreateAdditionalUser(userModel, null);
    }
    
    public CreateUserResultModel CreateAdditionalUser(CreateAdditionalUserModel userModel,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","CreateAdditionalUser");
        soapEnvelope.addMapping("","userModel",new CreateAdditionalUserModel().getClass());
        soapReq.addProperty("userModel",userModel);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CreateAdditionalUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CreateAdditionalUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    CreateUserResultModel resultVariable =  new CreateUserResultModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void UpdateUserAsync(UpdateUserModel updateModel) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateUserAsync(updateModel, null);
    }
    
    public void UpdateUserAsync(final UpdateUserModel updateModel,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, UpdateUserResultModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected UpdateUserResultModel doInBackground(Void... params) {
                return UpdateUser(updateModel, headers);
            }
            @Override
            protected void onPostExecute(UpdateUserResultModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("UpdateUser", result);
                }
            }
        }.execute();
    }
    
    public UpdateUserResultModel UpdateUser(UpdateUserModel updateModel){
        return UpdateUser(updateModel, null);
    }
    
    public UpdateUserResultModel UpdateUser(UpdateUserModel updateModel,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","UpdateUser");
        soapEnvelope.addMapping("","updateModel",new UpdateUserModel().getClass());
        soapReq.addProperty("updateModel",updateModel);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/UpdateUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/UpdateUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    UpdateUserResultModel resultVariable =  new UpdateUserResultModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void CreateOrganizationWithUserAsync(CreateOrganizationWithUserModel newOrganization) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CreateOrganizationWithUserAsync(newOrganization, null);
    }
    
    public void CreateOrganizationWithUserAsync(final CreateOrganizationWithUserModel newOrganization,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, CreateUserResultModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected CreateUserResultModel doInBackground(Void... params) {
                return CreateOrganizationWithUser(newOrganization, headers);
            }
            @Override
            protected void onPostExecute(CreateUserResultModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("CreateOrganizationWithUser", result);
                }
            }
        }.execute();
    }
    
    public CreateUserResultModel CreateOrganizationWithUser(CreateOrganizationWithUserModel newOrganization){
        return CreateOrganizationWithUser(newOrganization, null);
    }
    
    public CreateUserResultModel CreateOrganizationWithUser(CreateOrganizationWithUserModel newOrganization,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","CreateOrganizationWithUser");
        soapEnvelope.addMapping("","newOrganization",new CreateOrganizationWithUserModel().getClass());
        soapReq.addProperty("newOrganization",newOrganization);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CreateOrganizationWithUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/CreateOrganizationWithUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    CreateUserResultModel resultVariable =  new CreateUserResultModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void TryActivateAccountAsync(String key) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TryActivateAccountAsync(key, null);
    }
    
    public void TryActivateAccountAsync(final String key,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ActivationResultModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ActivationResultModel doInBackground(Void... params) {
                return TryActivateAccount(key, headers);
            }
            @Override
            protected void onPostExecute(ActivationResultModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("TryActivateAccount", result);
                }
            }
        }.execute();
    }
    
    public ActivationResultModel TryActivateAccount(String key){
        return TryActivateAccount(key, null);
    }
    
    public ActivationResultModel TryActivateAccount(String key,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","TryActivateAccount");
        soapReq.addProperty("key",key);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/TryActivateAccount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/TryActivateAccount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ActivationResultModel resultVariable =  new ActivationResultModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetUsersOrganizationGuidByEmailAsync(String email) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUsersOrganizationGuidByEmailAsync(email, null);
    }
    
    public void GetUsersOrganizationGuidByEmailAsync(final String email,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetUsersOrganizationGuidByEmail(email, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUsersOrganizationGuidByEmail", result);
                }
            }
        }.execute();
    }
    
    public String GetUsersOrganizationGuidByEmail(String email){
        return GetUsersOrganizationGuidByEmail(email, null);
    }
    
    public String GetUsersOrganizationGuidByEmail(String email,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetUsersOrganizationGuidByEmail");
        soapReq.addProperty("email",email);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetUsersOrganizationGuidByEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetUsersOrganizationGuidByEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetUsersOrganizationGuidByGuidAsync(String userGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUsersOrganizationGuidByGuidAsync(userGuid, null);
    }
    
    public void GetUsersOrganizationGuidByGuidAsync(final String userGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetUsersOrganizationGuidByGuid(userGuid, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUsersOrganizationGuidByGuid", result);
                }
            }
        }.execute();
    }
    
    public String GetUsersOrganizationGuidByGuid(String userGuid){
        return GetUsersOrganizationGuidByGuid(userGuid, null);
    }
    
    public String GetUsersOrganizationGuidByGuid(String userGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetUsersOrganizationGuidByGuid");
        soapReq.addProperty("userGuid",userGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetUsersOrganizationGuidByGuid", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetUsersOrganizationGuidByGuid", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetUsersGuidAsync(String email) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUsersGuidAsync(email, null);
    }
    
    public void GetUsersGuidAsync(final String email,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return GetUsersGuid(email, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetUsersGuid", result);
                }
            }
        }.execute();
    }
    
    public String GetUsersGuid(String email){
        return GetUsersGuid(email, null);
    }
    
    public String GetUsersGuid(String email,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetUsersGuid");
        soapReq.addProperty("email",email);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetUsersGuid", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetUsersGuid", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void GetManagerDataAsync(String email) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetManagerDataAsync(email, null);
    }
    
    public void GetManagerDataAsync(final String email,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ManagerData>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ManagerData doInBackground(Void... params) {
                return GetManagerData(email, headers);
            }
            @Override
            protected void onPostExecute(ManagerData result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetManagerData", result);
                }
            }
        }.execute();
    }
    
    public ManagerData GetManagerData(String email){
        return GetManagerData(email, null);
    }
    
    public ManagerData GetManagerData(String email,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetManagerData");
        soapReq.addProperty("email",email);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetManagerData", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetManagerData", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ManagerData resultVariable =  new ManagerData (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void FindByIdAsync(String userGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        FindByIdAsync(userGuid, null);
    }
    
    public void FindByIdAsync(final String userGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, UserAccountModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected UserAccountModel doInBackground(Void... params) {
                return FindById(userGuid, headers);
            }
            @Override
            protected void onPostExecute(UserAccountModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("FindById", result);
                }
            }
        }.execute();
    }
    
    public UserAccountModel FindById(String userGuid){
        return FindById(userGuid, null);
    }
    
    public UserAccountModel FindById(String userGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","FindById");
        soapReq.addProperty("userGuid",userGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/FindById", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/FindById", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    UserAccountModel resultVariable =  new UserAccountModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void DisableAsync(String id,String userEmail) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DisableAsync(id, userEmail, null);
    }
    
    public void DisableAsync(final String id,final String userEmail,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                Disable(id, userEmail, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Disable", result);
                }
            }
        }.execute();
    }
    
    public void Disable(String id,String userEmail){
        Disable(id, userEmail, null);
    }
    
    public void Disable(String id,String userEmail,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","Disable");
        soapReq.addProperty("id",id);
        soapReq.addProperty("userEmail",userEmail);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/Disable", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/Disable", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void EnableAsync(String id,String userEmail) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        EnableAsync(id, userEmail, null);
    }
    
    public void EnableAsync(final String id,final String userEmail,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                Enable(id, userEmail, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Enable", result);
                }
            }
        }.execute();
    }
    
    public void Enable(String id,String userEmail){
        Enable(id, userEmail, null);
    }
    
    public void Enable(String id,String userEmail,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","Enable");
        soapReq.addProperty("id",id);
        soapReq.addProperty("userEmail",userEmail);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/Enable", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/Enable", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void GetManagedUsersAsync(String adminGuid) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetManagedUsersAsync(adminGuid, null);
    }
    
    public void GetManagedUsersAsync(final String adminGuid,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorUserAccountModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorUserAccountModel doInBackground(Void... params) {
                return GetManagedUsers(adminGuid, headers);
            }
            @Override
            protected void onPostExecute(VectorUserAccountModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetManagedUsers", result);
                }
            }
        }.execute();
    }
    
    public VectorUserAccountModel GetManagedUsers(String adminGuid){
        return GetManagedUsers(adminGuid, null);
    }
    
    public VectorUserAccountModel GetManagedUsers(String adminGuid,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetManagedUsers");
        soapReq.addProperty("adminGuid",adminGuid);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetManagedUsers", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetManagedUsers", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorUserAccountModel resultVariable = new VectorUserAccountModel(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void GetRolesAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRolesAsync(null);
    }
    
    public void GetRolesAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorRoleModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorRoleModel doInBackground(Void... params) {
                return GetRoles(headers);
            }
            @Override
            protected void onPostExecute(VectorRoleModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("GetRoles", result);
                }
            }
        }.execute();
    }
    
    public VectorRoleModel GetRoles(){
        return GetRoles(null);
    }
    
    public VectorRoleModel GetRoles(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","GetRoles");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetRoles", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/GetRoles", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorRoleModel resultVariable = new VectorRoleModel(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void RequestPasswordChangeAsync(String email,String lang) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RequestPasswordChangeAsync(email, lang, null);
    }
    
    public void RequestPasswordChangeAsync(final String email,final String lang,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return RequestPasswordChange(email, lang, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("RequestPasswordChange", result);
                }
            }
        }.execute();
    }
    
    public boolean RequestPasswordChange(String email,String lang){
        return RequestPasswordChange(email, lang, null);
    }
    
    public boolean RequestPasswordChange(String email,String lang,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","RequestPasswordChange");
        soapReq.addProperty("email",email);
        soapReq.addProperty("lang",lang);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/RequestPasswordChange", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/RequestPasswordChange", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void ChangePasswordAsync(String token,String newPassword) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ChangePasswordAsync(token, newPassword, null);
    }
    
    public void ChangePasswordAsync(final String token,final String newPassword,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, UserAccountModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected UserAccountModel doInBackground(Void... params) {
                return ChangePassword(token, newPassword, headers);
            }
            @Override
            protected void onPostExecute(UserAccountModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ChangePassword", result);
                }
            }
        }.execute();
    }
    
    public UserAccountModel ChangePassword(String token,String newPassword){
        return ChangePassword(token, newPassword, null);
    }
    
    public UserAccountModel ChangePassword(String token,String newPassword,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","ChangePassword");
        soapReq.addProperty("token",token);
        soapReq.addProperty("newPassword",newPassword);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/ChangePassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/ChangePassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    UserAccountModel resultVariable =  new UserAccountModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void NewPasswordAsync(String passwordOld,String passwordNew,String email) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NewPasswordAsync(passwordOld, passwordNew, email, null);
    }
    
    public void NewPasswordAsync(final String passwordOld,final String passwordNew,final String email,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return NewPassword(passwordOld, passwordNew, email, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("NewPassword", result);
                }
            }
        }.execute();
    }
    
    public String NewPassword(String passwordOld,String passwordNew,String email){
        return NewPassword(passwordOld, passwordNew, email, null);
    }
    
    public String NewPassword(String passwordOld,String passwordNew,String email,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","NewPassword");
        soapReq.addProperty("passwordOld",passwordOld);
        soapReq.addProperty("passwordNew",passwordNew);
        soapReq.addProperty("email",email);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/NewPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/NewPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void WakeUpServiceAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        WakeUpServiceAsync(null);
    }
    
    public void WakeUpServiceAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return WakeUpService(headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("WakeUpService", result);
                }
            }
        }.execute();
    }
    
    public int WakeUpService(){
        return WakeUpService(null);
    }
    
    public int WakeUpService(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","WakeUpService");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/WakeUpService", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/WakeUpService", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        int resultVariable = Integer.parseInt(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        int resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1;
    }
    
    public void MarkAsPaidAsync(String invoiceGuid,String userEmail) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        MarkAsPaidAsync(invoiceGuid, userEmail, null);
    }
    
    public void MarkAsPaidAsync(final String invoiceGuid,final String userEmail,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ExtendedInvoiceModel>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ExtendedInvoiceModel doInBackground(Void... params) {
                return MarkAsPaid(invoiceGuid, userEmail, headers);
            }
            @Override
            protected void onPostExecute(ExtendedInvoiceModel result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("MarkAsPaid", result);
                }
            }
        }.execute();
    }
    
    public ExtendedInvoiceModel MarkAsPaid(String invoiceGuid,String userEmail){
        return MarkAsPaid(invoiceGuid, userEmail, null);
    }
    
    public ExtendedInvoiceModel MarkAsPaid(String invoiceGuid,String userEmail,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","MarkAsPaid");
        soapReq.addProperty("invoiceGuid",invoiceGuid);
        soapReq.addProperty("userEmail",userEmail);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/MarkAsPaid", soapEnvelope,headers);
            }else{
                httpTransport.call("http://eleet.eu/services/IPclLicenseServiceContract/MarkAsPaid", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ExtendedInvoiceModel resultVariable =  new ExtendedInvoiceModel (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void OpenAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        OpenAsync(null);
    }
    
    public void OpenAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                Open(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Open", result);
                }
            }
        }.execute();
    }
    
    public void Open(){
        Open(null);
    }
    
    public void Open(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","Open");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("/Open", soapEnvelope,headers);
            }else{
                httpTransport.call("/Open", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void CloseAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CloseAsync(null);
    }
    
    public void CloseAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                Close(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("Close", result);
                }
            }
        }.execute();
    }
    
    public void Close(){
        Close(null);
    }
    
    public void Close(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","Close");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("/Close", soapEnvelope,headers);
            }else{
                httpTransport.call("/Close", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void DisplayInitializationUIAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DisplayInitializationUIAsync(null);
    }
    
    public void DisplayInitializationUIAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                DisplayInitializationUI(headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("DisplayInitializationUI", result);
                }
            }
        }.execute();
    }
    
    public void DisplayInitializationUI(){
        DisplayInitializationUI(null);
    }
    
    public void DisplayInitializationUI(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("","DisplayInitializationUI");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("/DisplayInitializationUI", soapEnvelope,headers);
            }else{
                httpTransport.call("/DisplayInitializationUI", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
}
